name: Deploy Application

on:
  push:
    branches:
      - feature/aws-deployment-with-CI/CD
      - develop
  workflow_dispatch:

# Permission for GitHub Container Registry
permissions:
  contents: read
  packages: write

jobs:
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: develop
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: npm install
        working-directory: ./frontend
        
      - name: Install Vercel CLI
        run: npm install -g vercel
        
      - name: Deploy to Vercel
        run: |
          vercel --prod --yes \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --build-env NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-backend:
    name: Deploy Backend to AWS Lambda
    runs-on: ubuntu-latest
    needs: deploy-frontend
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: develop

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Backend Dependencies
        run: pip install -r requirements.txt
        working-directory: ./backend
        
      - name: Install Serverless Framework
        run: npm install -g serverless
        
      - name: Install Serverless Python Requirements Plugin
        run: npm install --save-dev serverless-python-requirements
        working-directory: ./backend
        
      - name: Deploy Backend to AWS Lambda
        run: serverless deploy --verbose
        working-directory: ./backend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          SERVERLESS_ORG: "kaztic"
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          
      - name: Get Lambda API Endpoint
        id: get-endpoint
        run: |
          ENDPOINT=$(serverless info --verbose | grep -oP 'ServiceEndpoint: \K.*')
          echo "API_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
          echo "LAMBDA_API_ENDPOINT=$ENDPOINT" >> $GITHUB_OUTPUT
        working-directory: ./backend
        
      - name: Update Vercel Environment Variables
        run: |
          vercel env add NEXT_PUBLIC_API_URL ${{ steps.get-endpoint.outputs.LAMBDA_API_ENDPOINT }} --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --project ${{ secrets.VERCEL_PROJECT_ID }} --yes
          vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --project ${{ secrets.VERCEL_PROJECT_ID }} --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }} 