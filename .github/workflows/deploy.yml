name: Deploy Application

on:
  push:
    branches:
      - feature/aws-deployment-with-CI/CD
      - develop
  workflow_dispatch:

# Permission for GitHub Container Registry
permissions:
  contents: read
  packages: write

jobs:
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: develop
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: npm install
        working-directory: ./frontend
        
      - name: Install Vercel CLI
        run: npm install -g vercel
        
      - name: Deploy to Vercel
        run: |
          vercel --prod --yes \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --build-env NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-backend:
    name: Deploy Backend to AWS Lambda
    runs-on: ubuntu-latest
    needs: deploy-frontend
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: develop

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Install Backend Dependencies
        run: pip install -r requirements.txt
        working-directory: ./backend
        
      - name: Install AWS SAM CLI
        run: |
          pip install aws-sam-cli
          
      - name: Make scripts executable
        run: |
          chmod +x cleanup-lambda.sh
          chmod +x get-endpoint.sh
          
      - name: Clean up previous Lambda deployment
        run: ./cleanup-lambda.sh
        continue-on-error: true # Continue if this fails (e.g., first deployment)
        
      - name: Create SAM template
        run: |
          cat > template.yaml << EOF
          AWSTemplateFormatVersion: '2010-09-09'
          Transform: AWS::Serverless-2016-10-31
          Resources:
            ReposageFunction:
              Type: AWS::Serverless::Function
              Properties:
                CodeUri: ./backend/
                Handler: app.handler
                Runtime: python3.9
                MemorySize: 1024
                Timeout: 30
                Layers:
                  - !Ref RequirementsLayer
                Environment:
                  Variables:
                    GEMINI_API_KEY: ${GEMINI_API_KEY}
                    ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
                    GITHUB_TOKEN: ${GITHUB_TOKEN}
                    ENCRYPTION_KEY: ${ENCRYPTION_KEY}
                    SECRET_KEY: ${SECRET_KEY}
                    FRONTEND_URL: ${FRONTEND_URL}
                    DATABASE_URL: sqlite:///tmp/reposage.db
                    REDIS_URL: redis://localhost:6379/0
                Events:
                  Api:
                    Type: Api
                    Properties:
                      Path: /{proxy+}
                      Method: ANY
            
            RequirementsLayer:
              Type: AWS::Serverless::LayerVersion
              Properties:
                LayerName: reposage-requirements
                ContentUri: ./requirements/
                CompatibleRuntimes:
                  - python3.9
          
          Outputs:
            ApiEndpoint:
              Description: API Gateway endpoint URL
              Value: !Sub https://\${ServerlessRestApi}.execute-api.\${AWS::Region}.amazonaws.com/Prod/
          EOF
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        
      - name: Prepare requirements layer
        run: |
          mkdir -p requirements/python
          cd backend
          pip install -r requirements.txt -t ../requirements/python
          cd ../requirements/python
          rm -rf torch* sentence_transformers* tensorflow*
        
      - name: Build and Deploy with SAM
        run: |
          sam build
          sam deploy --stack-name reposage-backend --capabilities CAPABILITY_IAM --no-confirm-changeset --no-fail-on-empty-changeset
        
      - name: Get API Endpoint
        id: get-endpoint
        run: |
          ENDPOINT=$(aws cloudformation describe-stacks --stack-name reposage-backend --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" --output text)
          echo "ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
          echo "API endpoint: $ENDPOINT"
        
      - name: Update Vercel Environment Variables
        run: |
          vercel env add NEXT_PUBLIC_API_URL ${{ env.ENDPOINT }} --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --project ${{ secrets.VERCEL_PROJECT_ID }} --yes
          vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }} --scope ${{ secrets.VERCEL_ORG_ID }} --project ${{ secrets.VERCEL_PROJECT_ID }} --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }} 